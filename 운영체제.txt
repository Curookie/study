운영체제는 컴퓨터 하드웨어와 컴퓨터 사용자 간의 매개체 역할을 하는
시스템 소프트웨어로서 사용자가 프로그램을 수행할 수 있는 환경을 제공한다.
운영체제의 주목적은 컴퓨터 시스템을 편리하게 이용하는 데 있고, 부수적인 목적은 컴퓨터
하드웨어를 효율적으로 관리하는데 있다.

운영체제의 유형

  일괄 처리 시스템
    작업의 준비 및 실행 순서를 자동화함으로써 시스템의 성능을 증진시킴,
    하나의 작업이 시작되면 그 작업이 모든 시스템 자원을 독점 사용함으로써 여러 시스템 자원,
    특히 중앙처리장치가 빈번한 유휴 시간을 가지는 문제점이 있다.

  다중 프로그래밍 시스템
    다중 프로그래밍은 중앙처리장치가 항상 수행되도록 하여 그 이용도를 높이기 위한 방안으로서
    주기억장치 내에 여러 프로그램들이 존재하도록 한다.
    별도의 기억장치 관리 기법이나 중앙처리 장치 관리 기법등이 필요하다
    이외에도 장치스키쥴링, 교착상태 문제, 병행제어 및 보호 문제등을 고려해야한다.

  시분할 시스템
    다중 프로그래밍의 변형된 형태로서 사용자들로 하여금 터민널을 통하여 컴퓨터와 직접 접촉할 수 있도록
    하기 위하여 개발되었다.
    시분할 시스템은 각 사용자로 하여금 자신만이 컴퓨터 시스템을 독점하여 사용하고 있는 듯한 착각이나
    환상을 가지도록한다.
    여러 사용자들이 컴퓨터 자원에 대한 짦은 시간 단위의 공유를 통해 현실화 되었다.
    사용자는 대화식 단말장치를 이용하여 시분할 시스템과 인터페이스한다.
    (timeslice = 시간을 쪼개어 유저들에게 나누어준다.)

  실시간 시스템
    실시간 시스템은 마이크로컴퓨터와 고속 아날로그/디지털 입출력장치의 발전과 더불어
    개발되고 실용화된 시스템으로서 대게 특수 목적만을 위한 응용 분야에서 제어장치로 사용된다.

  다중 처리 시스템
    여러개의 프로세서를 가지고있다.
    공유 기억장치를 통하여 하나로 연결된 다중처리기의 제어 및 공유를 위한 시스템이다.
    밀착된 결합
      시스템에서 프로세서들이 기억장치와 클럭을 공유한다.
    느슨한 결합
      시스템에서 프로세서들이 기억장치와 클럭을 공유하지 않으며
      각 프로세서들은 자신의 지역 기억장치를 가지며 프로세서들은 고속의 버스나 전화선 과 같은
      다양한 통신라인을 통해 서로 통신한다.

  개인용 컴퓨터 시스템
    멀티태스킹 제공 도스 및 윈도우즈 프로그램을 사용
    여러 교육기관과 산업계등에서는 LAN으로 연결된 다목적 워크스테이션을 활용하고있다.

  분산 처리 시스템
    통신 네트워크를 통하여 서로 느슨히 결합된 프로세서들의 집합이며,
    분산 시스탬내의 어느 특정 프로세서의 관점에서 볼 때, 그 프로세서가 가지고 있는
    자원을 지역이라고 한다면, 그 특정 프로세서 외의 나머지 모든 프롯세ㅓ들과
    그 프로세서들에게 속해 있는 자원을 원격이라고 말한다.

    네트워크 운영체제
      노드간 기종차이가 심하고 대규모 네트워크에 사용된다.
      각 노드들은 독자적인 운영체제를 가지며, 통신기능은 기존 운영체제 위에 존재하며
      자원공유가 곤란한다.
      대규모일 경우 좋다.
    분산 운영체제
      각 노드들을 통괄할 수 있는 하나의 운영체제로 운여오디며, 통신기능은 운영체제 설계시 고려된다.
      미니, 마이크로 컴퓨터 등으로 연결된 근거리 네트워크 시스템에서 많이 사용되며
      자원 공유가 용이하다.
    장점
      자원 공유, 연산 속도 향상, 신뢰성 향상, 통신 가능

  멀티미디어 시스템
    다양한 미디어를 이용하여 멀티미디어 콘텐츠를 제작하기 위해 필요한 하드웨어와 소프트웨어로 구성
    멀티미디어 콘텐츠를 제작 하기위한 저작도구가 필요하다.
    저작 시스템과
    재생 시스템으로 나눌 수 있으며
    제작 및 재생이 가능한 멀티미디어 플랫폼이 있다.

  임베디드 시스템
    마이크로 프로세서 또는 마이크로 컨트롤러를 내장하여 시스템 제작자가 의도한
    몇가지 혹은 특수한 기능만을 수행하도록 제작된 시스템
    임베디드 시스템과 그 한정된 자원들의 능력에 맞게 최적화 가능.


운영체제에 대한 관점.
  자원관리자의 관점
    각 자원에 대한 수행 과정
      자원의 상태를 추적 및 저장
      어떤 프로세스가 언제 어떤 자원을 얼마나 사용할 것인지를 결정하기 위한 정책 수립
      자원의 할당
      자원의 회수
    프로세스 관리 기능
      트래픽 제어기
        중앙처리 장치와 프로세스의 상태를 추적,저장하며 이를 수행하는 프로그램
      작업 스케줄러
        작업에게 프로세서 할당
      프로세스 스케줄러
        프로세스에게 CPU할당
    기억장치 관리 기능
      기억장치의 상태를 추적 및 저장 및 할당 회수

  자원 관리자 관점
    장치 관리 기능
      입출력 트래픽 제어기
        채널 등의 제어장치 및 입출력장치와 같은 각종 장치의 상태를 추적 저장
      입출력 스케줄링
        어떤 프로세스가 얼마나 사용할지를 결정
    정보 관리기능
      파일시스템
        정보의 위치, 사용 여부 및 상태 등을 추적 관리
      정보 자원할당 회수

  프로세스 관점
    하나의 작업이 제시되어 완료될 때까지 하나의 프로세스에 대하여
    그 상태를 변환시키고 고나리

  계층 구조 관점
    자원 관리 루틴이 어떻게 수행되고, 이 루틴들이 상호간에 어디에 논리적을 위치하는가
    모듈화된 자원관리
    커널의 구성 레벨 및 레벨별 해당 모듈
    레벨1 프로세서 관리 하위모듈
    레벨2 기억장치 관리
    레벨3 프로세서 관리 상위 모듈
    레벨4 장치 관리
    레벨5 정보 관리


입출력 프로그래밍
  대부분의 컴퓨터에 있어서 입출력은 중앙처리장치와 비동기적으로 시간관계 규정 없이 병행적으로
  수행된다.

  BIOS
    전원이 켜지면 메인보드와 cpu에 파워가 준비되었다는 신호를 보내게 되고
    컴퓨터는 다음 수행할 명령과 코드를 언제라도 접근 할 수있어야 한다.
    -> ROM에 저장
    -> BIOS -> 부트 프로세스를 실행시키는 명령어들을 포함
    -> 컴퓨터 칩에 저장된 명령어들 -> 펌웨어
    -> 리눅수와 맥이 개방 펌웨어, 개방 바이오스 등의 바이오스를 뛰어넘는
    확장성 펌웨어 인터페이스를 개발했다.

  부트 진행과정
    파워가 들어오고 부트 로더가 초기화 된다.
    POST(Power-on Selft-Test)를 수행한다.
    다른 BIOS들이 가동을 위해 초기화 된다.
    유저는 필요에 따라 BIOS접근을 위한 비밀키 입력을 요구 받는다.
    간단한 메모리 테스트가 수행되고 여러 파라메터들이 세트 된다.
    플러그와 플레이 디바이스들이 초기화 된다.
    DMA(Direct Memory Access)채널을 위한 자원들과 IRQ(Interrupt Request)가 할당된다.
    부트 디바이스들이 정해지고 초기화 된다.
    OS가 초기화 된다.

  POST
    성공적인 부팅 및 적정 수행의 확인을 위해 필요 하드웨어에 대해
    행하는 테스트

    버퍼링
      입출력 장치의 느린 속도를 보완하는 한 가지 방법
      중앙처리장치와 입출력장치 간의 시간적 불균형을 극복한다.
      미리 읽혀진 레코드들이 존재하는곳은 주기억 장치의 일부
      입출력은 CPU와 무관하게 비동기적으로 수행된다.

      1. 중앙처리 장치는 출력할 데이터를 버퍼에 채운다.
      2. 버퍼가 다 채워지면 중앙처리장치는 채널에게 출력을 지시하고 자신의 일을 계속한다.
      3. 채널은 출력을 수행함으로써 버퍼를 비운다.,
      4. 출력을 완료함으로써 버퍼를 다 비우면 중앙처리장치에게 알리낟.

  스풀링
    디스크르 매우 큰 버퍼처럼 사용하는것
    EX) 프린터
  채널
    출력장치와 중앙처리장치 사이에 입출력 전담 처리기
    선택 채널
      여러개의 입출력 장치가 연결되어 있다 하더라고 한번에 단하나의 입출력 장치만을 선택적으로 지원
      비교적 전송속도가 빠른 입출력장치인 디스크나 CD-ROM등의 입출력을 제어한다.
    멀티플렉서 채널
      다수의 저속도 입출력장치가 채널의 단일한 데이터 경로를 공유하면서 데이터를 전송
      여러개의 저속도 입출력 장치가 멀티플레서 채널에 연결되어 시분할 형태로 제어된다.
    채널과 중앙처리장치 간의 통신은 일반적으로 인터럽트에 의하여 이루어 진다.

인터럽트
  시스템에 예기치 않은 상황이 발생하였을때 , 그겅을 운영체제에 알리기 위한 메커니즘
  종류
    입출력(I/O) 인터럽트
    외부(external) 인터럽트
    SVC(SuperVisor Call) 인터럽트\
    기계 검사(machine check) 인터럽트
    프로그램 에러(program error) 인터럽트
    재시작(restart) 인터럽트

운영체제의 주목적은 무엇인가
  운영체제의 주목적은 컴퓨터 시스템을 편리하게 이용하는 데 있고, 부수적인 목적은 컴퓨터
  하드웨어를 효율적으로 관리하는데 있다.

프로세스와 스레드 관리
  컴퓨터에서 중앙처리장치는 컴퓨터 자원중 가장 중요한 자원으로 인식되고 있다.
  중앙처리 장치 스케줄링 이란 사용자로붙어 의뢰받은 작업을 처리하기위해 프로세스들에게
  중앙처리장치 또는 프로세서들을 할당하기 위한 정책을 정하는 것이다.

  중앙처리장치 효율 및 처리율의 최대화와 반환시간의 최소화에 그 목적을 두고있다.

  프로세스 관리
    프로세스란
      실행 중인 프로그램
      PCB를 지닌 프로그램
      프로그램 카운터를 지닌 프로그램
      능동적 개체로, 순차적으로 수행하는 프로그램

    운영체제는 프로세스 관리와 관련하여 다음과 같은 기능을 수행하게 된다.
      사용자 프로세스와 시스템 프로세스의 생성과 삭제
      프로세스의 일시 중지와 재수행
      프로세스 스케줄링
      프로세스의 동기화
      프로세스 간 통신
      교착 상태 처리

    프로세스 구성 요소
      코드영역 - 실행 명령어 코드
      데이터 영역 - 전역변수/정적변수
      힙 영역 동적할당
      스택 영역 - 지역변수/전달인수

    프로세스 상태
      실행 상태(RUNNING)
        프로세스가 중앙처리장치를 차지하고 있는 상태
      준비완료 상태(READY)
        중앙처리장치가 사용 가능하게 될 때 그것을 할당받을 수 있는 상태
      대기상태(BLOCK)
        프로세스가 중앙처리장치를 차지하고 처리하다가 입출력처리등을 하게 되면
        중앙처리 장치를 양도하고 입출력처리가 완료될때까지 기다리는상태

      준비 -> 실행 디스패치 하위단계
      실행 -> 준비 타이머런아웃(할당시간완료)
      실행 -> 대기 블락
      대기 -> 준비완료 웨이크업

      잡 스케줄러가 read로 바꿔준다. 상위단계
      -> 스케줄링 기법에 의하여
      -> ready queue에 줄을 세우는 방법


    프로세스 제어블록
      프로세스에 관한 모든 정보를 가지고 있다
      구성형태
        프로세스의 현재 상태
        프로세스의 고유 이름
        프로세스의 우선 순위
        프로세스가 적재된 기억장치의 주소를 가지는 포인터
        할당된 자원을 가리키는 포인터
        중앙처리장치의 각종 레지스터 상태를 저장하기 위한 공간

  프로세스 스케줄링
    스케줄링의 목적 및 기준
    목적
      공정성
      처리능력의 최대화
      응답시간의 최소화
      예측가능
      오버헤드 최소화
      자원사용의 균형유지
      응답과 이용간의 균형 유지
      실행의 무한지연을 피할것
    기준
      입출력 위주의 프로세스인가?
      연산 위주의 프로세스인가?
      프로세스가 일괄처리형인가 대화형인가?
    단계별 분류
      상위 단계 스케줄링
        작업 스케줄링이라고도 불린다.
        준비완료큐로 보낼때 하는단계

      중간 단계 스케줄링
        할당시간이 종료되었을때

      하위 단계 스케줄링
        어떤 준비완료 프로세스에게 중앙처리장치를 할당할 것인가를 결정

    방법/환경별 분류

      선점/비선점 스케줄링
        비선점
          하나의 프로세스에 중앙처리 장치가 할당되면 그 프로세스의 수행이 끝날 때 까지
          중앙처리장치는 그 프로세스로부터 빠져나올 수 없다.
        선점
          하나의 프로세스가 중앙처리장치를 차지하고 있을 때 다른
          다른 프로세스가 현재 수행 중인 프로세스를 중지시키고 자신이 중앙처리장치를 차지할 수 있다.

      우선순위 스케줄링
        우선순위가 높은 순서대로 처리하는 방법이다.
            정적 우선순위
              실행이 쉽고 상대적으로  오버헤드가 적으나
              주위 여건의변화에 적응하지 않고 우선순위를 바꾸지 않는다.
            동적 우선순위
              변화에 적응한다. 우선순위는 플요에 따라 재구성되어 잠시 동안만
              그 슨위를 가질 뿐 다시 조정될 수있다.
              정적 방법보다 실행에 있어서 보다 복잡하고 오버헤드가 많아지지만
              시스템의 응답도를 증가시켜 처리 효율을 높인다.
        기한부 스케줄링
          특정 시스템에서 사용한다.
          실시간 시스템
            - 경성 시간제한이 심하다.
            - 연성 시간제한이 덜 심하다.
            정적 스케줄링
              시스템에 의해 실행되는 테스크 집합이 미리 정의되어 있는 경우
            동적 스케줄링
              태스크의 발생 시간이나 특성을 미리 예측할 수 없을 경우 유용

        다중 프로세서 스케줄링
          특정 시스템에서 사용 - 다중 제어 시스템
          이질 시스템으 ㅣ경우
            각 프로세서는 자신의 큐가 있으며 자신의 스케줄링 알고리즘을 가진다.
            각 프로세서들은 고유한 구조형태를 가지며, 해당 프로세서의 명령어로 작성된 프로그램은
            그 프로세서에서만 실행된다.
          동질의 경우
            부하공유를 하게 된다. 이 경우 각 프로세서맏 ㅏ별개의 큐를 재ㅔ공하는 것이 가능하다.
            그러나 이경우 큐가 비어있는 프로세스는 쉬게 되기 때문에
            공동의 큐를 사용하게듀ㅚㄴ다. 프로세스들은 한 개의 공동 큐로 들어가서 실행 가능한 프로세서에 스케줄된다.
프로세스 스케줄링 알고리즘
  FCFS(First Come First Served) 스케줄링 (공정성, 선착순)
    비선점 스케줄링 방법
    프로세스들이 대기 큐에 도착한 순서에 따라 중앙처리장치를 할당받는다.
    프로세스가 완료 될 때까지 CPU를 점유한다.
  SJF(Shortest Job First)
    기다리고 있는 프로세스 중에서 수행시간이 가장 짧은것을 먼저 수행하는
    비선점 스케줄링 방식이다.
  우선순위 스케줄링
    우선순위가 각 프로세스에게 주어지며 높은 우선순위를 가진 프로세스가 먼저
    할당 받게 된다.
    우선순위 스케줄링 알고리즘의 주요 문제는 무한대기 또는 기아 현상이다.
    낮은 우선순위의 프로세스들의 무한 대기 문제에 대한 해결책은 에이징 이다.
      에이징이란 오랫동안 시스템에서 대기하는 플세스들의 우선순위를
      점진적으로 증가시키는 방법이다.
  라운드로빈(Round_Robin) 스케줄링
    시분할 시스템을 위하여 고안된 선점 스케줄링 방식의 하나다.
    FCFS에 의하여 프로세스들이 내보내지며 각 프로세스는 같은 크기의
    중앙처리장치 시간을 할당받는다.
    이때 할당 시간의 크기는 보통 10에서 100MS 사이다.
    만약 프로세스가 중앙처리 장시 시간이 만료될 때까지 처리를 완료하지 못하면
    그 중앙처리장치는 대기 중인 다음 프로세스에게 넘어가며, 실행중이던 프로세스는
    준비완료 리스트의 가장 뒤로 보내진다.
    할당시간이 너무 클 경우
    각 프로세스는 그 프로세스를 처리 완료하는 데 필요한 시간보다 많은 시간이 할당될 경우
    이 떄의 라운드 로빈은 FCFS방식과 같은 형식이 된다.
    할당시간이 너무 적을 경우
    문맥 교환을 위한 오버헤드가 무시 못할 요소가 되어 결과적으로 대부분의 시간이
    중앙처리 장치를 분배하는데 소모 되므로 시스템의 성능이 떨어진다.
  SRT(Shortest Remaining Time) 스케줄링
    SJF기법에 선점방식을 도입한 변형된 방법으로 시분할 시스템에서 유리하다.
    SJF와 마찬가지로 새로 도착한 프로세스를 포함하여 처리가 완료되는데 가장 짧은시간이
    소요된다고 판단되는 프로세스를 먼저 수행시킨다.
    SRT는 각 프로세스가 서비스를 받을 시간이 기록 보유되어야 하기 떄문에
    오버헤드가 늘어난다.
    임계치를 부여하여 조정할 수 있다.
      만일 수행 중인 작업을 끝내는 데 소요되는 시간이 이 임계치 보다 적다면
      시스템은 중간에 그 작업을 중지하지 않고 완료될 때까지 수행하도록 한다.
  다단계 큐 스케줄링
    작업들을 여러 그룹으로 나누어 여러개의 큐를 이용하는 기법으로
    전면 작업 프로세스들과 후면작업 프로세스들로 나눈다.
    전면 작업 프로세스들은 후면작업 프로세스들보다 높은 우선순위를 가진다.
    전면 RR
    후면 FCFS
  다단계 피드백 큐
    입출력장치를 효과적으로 이용하기 위해 입출력 위주의 작업들에 우선권을 주며
    가능한 빨리 작업의 특성을 알고 그것에 맞게 그 작업을 스케줄링한다.
    하위 단계의 큐로 옮겨갈 수록 주어진 할당시간은 점차 크게 설정된다.
    즉 높은 단계에 있는 큐의 프로세스가 더 높은 우선순위를 갖기 때문에 낮은 단계로 내려
    갈수록 중앙처리장치를 차지하는 빈도는 적어지는 반면, 일단 중앙처리장치를 차지하면
    큰 할당시간은 보장받을 수 있게 된다.
    제일 마지막은 RoundRobin으로 처리한다.
  HRN
    비선점 스케줄링 기법중 하나
    SJF의 약점, 특히 긴 작업과 짧은 작업 간의 지나친 불평등을 보완한 기법
    우선순위 : 대기시간+서비스받을시간/서비스받을시간 = 시스템 응답시간(우선순위)

  스레드
    프로세스보다 작고 독립적으로 스케줄링이 가능하다.
    특성
      각 스레드는 서로 독립적이다.
      스레드의 실행/종료 순서는 예측할 수 없다.
      스레드들은 수행을 위해 스케줄 되고 결과들은 프로세스에게 전달된다.
      스레드는 서로 독립적이지만, 한 스레드가 취한 행동은 프로세스에 있는
        다른 스레드에 영향을 미친다.
      스레드는 프로세스의 일분이기 때문에 프로세스의 자원들을 공유하지만
        그 자신의 처리시간과 스택, 레지스터들이 할당된다.
    다중 스레딩
      다수의 스레드를 이용하여 하나의 프로그램을 동시에 처리하는 것으로
      하나의 프로그램을 위하여 다수의 실행단위를 이용한다는 점에서 다중 프로세싱과
      같은 의미이다.

      각 스레드는 서로 독립적으로 동시에 수행이 가능하여 다중 프로세서
      시스템에서느 물론 단일 프로세서 시스템 상에서도 업무의 실질적인 다중처리를
      가능하게한다.

      기억장치를 공유하여 사용한다.

      중량 프로세스
        하나의 스레드를 가진 프로세스를 말한다. 프로세스 내에 스레드가 없다면 프로세스는 수행 될 수없으며
        스레드는 프로세스내에 필히 존재하여야한다.
      경량 프로세스
        프로세스 내에 두개 이상의 스레드를 포함하고 있을 경우
        그 각각을 말하며, 그것들은 같은 프로그램 코드,데이터,시스템 자원들을 이용하며,
        각각의 프로그램 카운터, 레지스터들과 스택을 가진다.
        공유 메모리 사용

  준비완료 -> 실행
    준비완료 큐에서 하위단게 스케줄링에 의해 실행될 경우
  실행 -> 준비완료
    선점방식일때 달느프로세스가 CPU점유를 선점할 경우
  실행 -> 대기
    인터럽트가 걸릴 경우
  대기 -> 준비완료
    대기큐에서 본인차례가 될 경우


기억장치 관리
  SSD: 반도체 메모리 내장함, 처리속도 빠르고 소음이 없다.

  주소 바인딩
    -정의
      논리적주소 라고 하며, 실행되기 위해 물리적 주소로 사상되어야 한다.
      바인딩시점에 따라 구분된다.
      - 컴파일시간 바인딩
        컴파일 시 바인딩한다.
        실행시 위치가 바뀌면 다시 컴파일 해야 하는 경우의 바인딩
      - 적재시간 바인딩
        프로그램이 기억장치에 적재되는 시간에 적재기에 의해 이루어지는 경우으 ㅣ바인딩
      - 실행시간 바인딩
        실행되는 동안에 기억장치의 한 세그먼트에서 다른 세그먼트로 옮겨질 경우와 같이
        실행시간에 이루어지게 되는 경우의 바인딩
        MMU가 해주게된다.

  논리적 주소와 물리적 주소
    -논리적 주소
      가상주소
      중앙처리장치가 생성한다.
    -물리적 주소
      메모리의 실제주소, 즉 기억장치가 취급하는 주소
    -기억장치 관리기 (MMU)
      논리적 주소를 물리적 주소로 변환

  기억장치의 계층 구조 및 관리 기법
    레지스터
    캐시 기억장치
    주기억 장치
    보조기억장치

    올라가수록
      기억장치 접근시간이 감소
      기억장치 접근속도 증가
      비트당 기억장치 비용 증가
      기억장치 용량 감소

    레지스터 및 캐시기억장치 주기억장치는
    중앙처리장치가 프로그램과 데이터를 직접 참조가능

  기억장치 관리 기법
    인출 기법
      주기억장치에 적재할 다음 프로그램이나 데이터르 언제 가져올 것인가를 결정한다
        요구 인출 기법
          실행 프로그램에 의해 어떤 프로그램이나 데이터가 참조될 때 그것을 주기억 장치로 옮긴다.
        예상 인출 기법
          앞으로 요구될 가능성이 큰 데이터또는 프로그램을 예상하여 주기억장치로 미리 옮긴다.
    배치 기법
      새로 인출도니 데이터나 프로그램을 주기억장치의 어디에 위치시킬 것인가를 결정하는 기법
        -최초적합
        -최적적합
        -최악적합
    교체 기법
      새로 들어온 프로그램이 들어갈 장소를 마련하기 위해서 어떤 프로그램 및 어떤 데이터를 제거할 것인가를
      결정한다.

  단일 사용자 연속 기억장치 할당
    초기의 컴퓨터 시스템에서는 임의의 시간에 한 사용자만이 시스템을 사용
    오버레이기법
      주기억장치보다 더 큰 프로그램의 실행이 가능하다.
        프로그램의 필요없는 부분을 보조기억장치에 보관해 놨다가
        필요한 순간에 보조기억장치로 부터 옮겨와서 사용한다.
        주기억장치의 낭비 해소
      시스템 보호
        중앙처리장치 내에 하나의 경계 레지스터를 이용한다
          운영체제와 사용자 프로그램의 경계를 구분해준다.
        슈퍼바지어 콜 (SVC)명령을 이용하여 운영체제에 서비스를 요청할 수 있다.
