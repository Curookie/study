요구사항 결정을 위한 최신 방법론
  합동 응용 시스템 설계(JAD)
    - 주 사용자, 관리자, 시스템 분석가를 모이게 한다.
    - 목적 : 주요 사람들로부터 시스템 요구사항을 동시에 수집함.
    - 다른 장소에서 수행된다.

  프로토타이핑
    -반복적인 과정.
    -시스템의 초보적 버전을 개발한다.
    -SDLC를 대체하거나 강화한다.
    -목적 : 반복을 통하여 최종 시스템에 대한 구체적인 세부내역을 개발한다.

  프로토타이핑의 이점
    사용자는 요구사항을 작동하는 시스템으로 빠르게 전환할 수 있다.
    사용자는 시스템으로 전환된 요구사항을 보고 나서, 수정을 요청하거나
     추가 요청을 할 수 있다.
     -사용자 요구사항이 불명확한 경우 유용하다.

  프로토타이핑의 결점
    공식적인 문서를 작성하지 않는 경향
    다른 시스템과의 공유가 종종 고려되지 않음
    시스템개발생명주기에서의 체크를 종종 건너뜀

비즈니스프로세스재설계(BPR)
  제품과 서비스에 있어 강력한 개선을 이루기 위한
  비즈니스 프로세스의 검색, 구현, 그리고 급전젹 변경 활동
  목적
    -조직의 주요 부문에서의 데이터의 모든 흐름을 재구성한다.
    -불필요한 절차를 없엠
    -절차를 결합 한다.
    -미래의 변화에 더 민감해진다.

  재설계를 위한 프로세스의 규명
    -핵심 비즈니스 프로세스
      -특정 고객 또는 시장에 대한 구체적인 결과물을 생산할 수 있도록
       설계된 구조화되고 측정 가능한 활동들의 집함
      -고객과 결과에 집중한다.
      -요구사항 결정에 사용되었던 동일한 기법들이 사용된다.
  BPR을 통해 개설될 수 있는 특정 활동들을 규명한다.
  파괴적 기술
    -급격한 비즈니스 변화로부터 조직을 억제하면서 오랫동안
     유지되어 온 비즈니스 규칙들이 붕괴되도록 만드는 기술


6장
  프로세스 모델링
    -시스템과 환경간 또는  시스템 내부 구성간의 데이터의 포작, 저장, 및 분배를 하는
    프로세스 또는 행동을 그래피갛게 표현한 것이다.
    -데이터 흐름도(DFD)
     외부의 객체들 간의 데이터의 이동과 시스템 내부의 프로세스와 데이터 저장소를
     그래픽하게 묘사
    -시스템 프로세스 모델링
      프로세스 뿐만 아니라 데이터의 구조도 모델링 된다.
    -산출물
      밀착되고 상호관계되어 있는 데이터흐름도의 집합
      상황도
        - 시스템의 범위
      현 시스템의 DFD
        -분석가가 현 시스템을 이해하도록 해준다.
      새로운 논리적 시스템의 DFD
        - 기술 독립적
        - 새로운 시스템의 데이터 흐름, 구조 , 기능 요구사항들을 보여준다.
      -프로젝트 사전과 CASE 저장소

  데이터 흐름도의 작성원리
    -4개의 기호가 쓰인다.
    -Gane와 Sarson에 의해 개발

  데이터 흐름
    - 시스템 내에 존재하는 하나의 단위로서 한곳에서 다른 고승로 이동하고
      움직이는 데이터를 기술한다.
    - 화살표로 그린다.
    - 데이터를 표현하기 위해서 의미있는 이름을 선택한다.

  데이터 저장소
    -정지한 데이터를 표현한다.
    -다음 중의 데이터를 표현한다
      - 파일폴더
      - 컴퓨터 파일
      - 노트북
    - 오른 쪽 수직선이 없는 사각형으로 작성한다.
    - 숫자와 저장소의 이름을 Label로 작성

  프로세스
    -전환되거나 저장되거나 분배되기 위한 데이터에 수행되어 지는 작업 또는 행동을 기술
    - 모서리가 둥근 사각형 그림
    - 프로세스의 이름과 번호가 기록된다.

  소스/링크
    -데이터의 기원과 목적지를 기술
    -때때로 외부 개체라 불려진다.
    -사각형 기호로 그려짐
    -이름은 외부 에이전트가 무엇인지를 설명
    -분석 대상의 외부에 존재하기 때문에, 구체적인 특징은 분석과 무관하다.

  상황도
    - 시스템 경계들, 시스템과 상호작용하는 외부 개체들, 개체들과 시스템 간의 주요 정보
    흐름을 보여주는 조직 시스템범위의 데이터 흐름도(DFD)

  수준-0 다이어그램
    -시스템 주요 프로세스들, 데이터 흐름들, 그리고 데이터 저장소들을 상위
    수준으로 표현한 데이터 흐름도

  모든 DFD에 적용되는 기본 규칙
    -프로세스로 들어가는 입력은 그 프로세스로부터 나오는 출력과는 다르다.
    -DFD상의 객체는 유일한 명칭을 가지낟.

  프로세스
    출력만 있는 프로세스는 있을 수 없다.
    입력만 있는 프로세스는 있을 수 없다.
    프로세스는 동사 구의 명명을 가진다.

  데이터 흐름
    하나의 기호는 오직 한방향의 흐름을 가진다.
    데이터의 흐름은 한 번 지나간 동일한 프로세스로 직접적인 역행이 불가하다.
    데이터흐름은 명사구로 명명된다.

  DFD 분해
    기능적 분해
      -하나의 시스템으로부터 많은 구성 프로세스들로 분리 하는 행동
      -반복적인 절차
      -가장 낮은 수준을 기본 DFD라 칭하낟.
    수준-n 다이어그램
      -수준-0 다이어그램에서 n번의 연속된 하부 프로세스 분할 결과 생성된 DFD

  다음 레벨로 DFD를 분해할 때 다음 레벨의 분해에서 프로세스로의 입력과 출력은 보존
  되어여 한다.
    - 이러한 입력과 출력의 보존을 균형잡기라 한다.

DFD작성 지침
  완전성
    -DFD는 모델링 하고자 하는 시스템에 필요한 모든 구성요소를 포함하여야 함
    -각 구성요소는 프로젝트 사전이나 CASE저장소에 완전히 기술되어야 한다.
  일관성
    -어떤 수준의 DFD에 포함된 정보가 다른 수준의 DFD에도 포함되어 있는 정도
  타이밍
    -DFD는 시간을 잘 표현하지는 못한다.
  반복적인 개발
    -모델링 되고 있는 시스템의 가장 근접하게 하기 위해서 분석가는 다이어그램을
    여러번 반복해서 그려야 할 것이다.
  기본 DFD
    -분해의 가장 하위의 논리 수준
    -분해를 언제 멈춰야 할지를 결정해야 한다.

  분해를 멈추는 규칙들
    -각각의 프로세스를 하나의 의사결정이나 계산 또는 단일 데이터베이스 조작까지 줄였을때
    -각각의 데이터 저장소가 단일 개체에 대한 데이터를 나타낼 때
    -시스템 사용자가 더 상세한 세부사항을 보고자 하지 않을 때

분석 도구로의 DFD사용
  갭분석
    -2개 이상의 데이터흐름도들 간의 불일치 또는 하나의 DFD 내의 불일치 들을
      발결하는 프로세스
    -시스템 내의 비효율성은 종종 DFD를 통해서 식별되기도 한다.

논리 모델링
  데이터 흐름도는 프로세스 내부의 논리를 보여주지 않는다.
  논리 모델리은 내부 구조 표현과 DFD에 표현된 프로세스의 기능을 포함한다.
  논리 모델링에 의사결정 테이블을 사용한다.

의사결정 테이블을 이용한 논리 모델링
  -의사결정 논리를 매트릭스로 표현
  -가능한 조건들과 결과적인 행위들을 규정
  -복잡한 의사결정 논리에 적합하다.
  - 3부분 으로 구성된다.
    -조건부
      의사결정에 유의한 조건들을 나열
    -행동부
      주어진 조건들의 집합에 대한 결과적인 행동
    -규칙
      주어진 조건들의 집합에 대해 어떠한 행동들이 수반되어야 하는지를 규정
  -무관조건
    의사결정 테이블에서, 2개 이상의 규칙에 대한 행위에 영향을 미치지 않는 값을 가진 조건

용어정리
  균형잡기 287
    데이터흐름도의 프로세스가 하위 수준으로 분할될 때, 이 프로세스에 대한 입출력물의 유지
  상황도 278
    시스템 경계, 시스템과 상호작용하는 외부 개체, 개체와 시스템 간의 주요한 정보 흐름
    등을 보여줌으로써 조직에서의 시스템의 범위르 표현한 데이터 흐름도
    - 데이터저장소가 없다.
  갭분석 294
    2개 이상의 데이터흐름도들 간의 불일치 또는 하나의 데이터흐름도 내의 불일치를
    발견하는 프로세스
  수준-0다이어그램 280
    시스템의 주요 프로세스, 데이터흐름, 데이터저장소 등을 상위 수준으로
    표현한 데이터흐름도
  수준-n다이어그램 285
    수준-0 다이어그램에서 n번의 분할 결과 생성된 데이터 흐름도
  기본 데이터흐름도 294
    가장 낮은 수준으로 분할된 데이터흐름도


7장
  개념적 데이터 모델링
    조직의 데이터를 표현
    주요 산출물은 ERD

    2가지 관점
      하향식
        비즈니스에 대한 본질적인 이해를 바탕으로 데이터 모델을 도출하는 관점
      상향식
        구체적인 비즈니스 문서들을 검토하여 데이터 모델을 도출하는 관점

8장
사용자 인터페이스 설계
양식과 리포트의 설계
  시스템 입력과 출력은 분석단계의 마지막에 생성된다.
    -이 단계에서 정확한 모습이 정의되지는 않는다.
  양식과 리포튼느 자료흐름도(DFD)와 개체관계도(ERD)에 통합적으로 연결되어 있다.

  양식 설계의 주요 개념
    -사전에 정의된 데이터들을 포함하는 비즈니스 문서로서, 추가적인 데이터들이
     입력될 수 있는 구역들을 가지고 있다.
    -양식의 인스턴스는 전형적으로 데이터베이스 레코드에 기반하여 생성된다.
  리포트 설계의 주요 개념
    -사전에 정의된 데이터만을 포함하는 비즈니스 문서
    -이것은 읽거나 검토하는데에만 사용되는 수동적인 문서이다.
    -리포트 형식은 전형적으로 다수의 레코드들 또는 거래처리르 기반으로 한
     데이터들을 포함한다.

  양식과 리포트 설계 과정
    -사용자 중심의 활동
    -프로토타이핑 접근법을 따른다.
    -요구사항 결정
      -양식과 리포트를 누가 사용할 것인가.
      -목적은 무엇인가
      -언제 필요하며 사용되는가
      -어디에 전달되고 사용되는가
      -얼마나 많은사람들이 보고 사용할 것인가

      프로토타이핑
        -요구사항으로부터 초기 프로토타입을 설계한다.
        -사용자가 프로토타입을 검토하고 설계를 승인하거나 변경을 요쳥한다.
        -변경이 요청되면, 설계가 승인될 때까지 구축, 평가, 개선의 순환을 계속한다.
  산출물
    설계 명세서는 중요한 산출물이며 다음의 세 영역을 포함한다.
      -스토리개요
      -견본 설계
      -테스트와 유용성 평가

  양식과 리포트의 일반적인 서식작성 지침
    강조
      정보로부터 사용자들을 떨어져 있게 하거나 구분하거나 관심을 끌기위해 사용
      깜빡임, 음향은 사용자의 집중을 요구하는 중요한 정보를 강조할 떄만 사용한다.

    텍스트 표현
      -대소문자를 혼합하고 관습적 표현을 따른다.
      -공간에 여유가 있다면 두줄 간격을 사용한다.
      -왼쪽 맟춤을 사용하여 오른쪽에 들쭉날쭉한 형태의 여백이 생기도록한다.
      -줄이 바뀔 때에는 하이픈이 들어간 단어를 사용하지 않는다.
      -사용자들이 보편적으로 이해하고 전문을 사용할 때보다 훨씬 짧은 문장이 될 때
       약어를 사용한다.
    테이블과 목록의 표현
      -라벨
        -모든 열과 행은 의미 있는 라벨을 사용해야 한다.
        -라벨은 강조하여 다른 정보와 분리되어야 한다.
        -데이터가 한 화면 또는 페이지를 초과하면 라벨은 반복되어야 한다.
      -열, 행, 텍스트의 형식
        -의미있는 순서로 정렬하라
        -긴 열의 경우 각 5줄마다 빈 줄을 삽입하라.
      -숫자,텍스트,기호로 표시된 문자 및 숫자 데이터의 형식
        -숫자데이터는 소수점을 기준으로 오른쪽으로 맟춘다.
        -텍스튼 왼쪽 으로 맞춘다.

  인터페이스와 대화 설계
    정보가 어떻게 사용자에게 제공되고 획득되는 지를 강조
    대화(Dialogues)는 두 사람간의 대화와 유사하다.
    좋은 사용자-컴퓨터 인터페이스는 시스템의 다른 구성요소들을 찾고,보고,발생시
    키는 단일화된 구조를 제공한다.

  인터페이스와 대화의 설계 과정
    -사용자 중심의 활동
    -양식과 리포트 설계과정을 병행한다.
    -프로토타이핑 방법론을 적용한다
      -정보의 수집
      -프로토타입의 구축
      -유용성 평가
      -개선
  산출물
    -설계 명세서
      -스토리 개요
      -견본 설계
      -테스트와 유용성 평가

  레이아웃 설계
    -양식과 리포트와 유사한 표준화된 형식을 사용하여야 한다.
    -데이터 입력화면 : 네비게이션은 문서를 읽을때처럼 왼쪽에서, 오른쪽,
     위에서 아래로 이루어져야 한다.
    -주요 설계 목적은 유연성과 일관성임
      -사용자들은 필드를 자유롭게 이동할 수 있어야한다.(TAB키등등)
      -데이터는 사용자가 명시적으로 저장을 요청하기 전에는 영구적으로 저장되어서는
       안된다.
      -각 키와 명령어는 한 기능에만 할당되어야 한다.

별표 데이터 입력 구조화
  입력
    이미 온라인상에 존재하거나 계산될 수 있는 데이터는 요구하지 않는다.
  기본값
    적절하다고 판단될 때에는 기본값을 항상 제공한다.
  단위
    입력에 요구되는 데이터 단위의 형식을 명확히 한다.
  대체
    적절하다고 판단될 때에는 문자를 자동으로 제시해 준다.
  캡션
    항상 필드 근처에 캡션을 제공한다.
  형식
    형식 에제를 제공한다.
  맞추기
    자동적으로 데이터 입력을 맞춘다.
  도움말
    적절하다고 판단될 때에는 상황에 맞는 도움말을 제공한다.

  데이터 입력 제어
    -인터페이스 설계의 목표 중 하나는 데이터 입력 오류를 줄이는 것이다.
    -시스템 분석가의 역할은 사용자 오류를 예측하고 시스템 인터페이스에 데이터 입력
     실수를 피하고, 오류를 발견하고 정정하는 특성을 설계하는 것이다.
    데이터 입럭 오류의 유형
      -추가하기
        필드에 부가적인 문자들을 추가함
      -자르기
        필드로부터 문자를 잃어버림
      -복사하기
        유효하지 않은 데이터를 필드에 입력함
      -전송하기
        필드에서 하나 또는 그 이상의 문자들의 순서를 바꿈
    오류를 발견하기 위해 시스템 설계자가 사용하는 기법
      종류 또는 구성
        데이터가 적절한 형태인지 테스트
      조합
        두 개 이상의 데이터 필드의 조합들의 값이 적절한지 검증
      기대값
        데이터의 값이 기대되는 값과 일치하는지를 테스트한다.
      결측 데이터
        모든 필드의 레코드에 데이터 항목이 있는지를 테스트한다.
      템플릿
        데이터가 표준형식을 따르는지를 테스트한다.
      범위
        값의 범위가 적절한지를 테스트한다.
      합리성
        데이터가 상황에 논리적으로 맞는지를 테스트한다.
      검증 숫자
        표준 형식을 이용하여 유도되는 숫자 필드에 추가 숫자가 추가하여 테스트한다.
      크기
        너무 적거나 많은 문자를 사용했는지를 테스트한다.
      값
        값이 표준값에 맞는지를 테스트한다.

  피드백 제공
    상태정보
      -사용자에게 시스템에서 무슨 일이 진행되고 있는 지를 알려준다.
      -작업이 1,2초 이상 걸릴 때 상태정보를 보여주는 것은 특히 중요하다.
    지시 메시지
      -가능하면 상세하게 하는 것이 최선이다.
    오류와 경고 메시지
      -메시지를 구체적으로 만들고 코드와 전문용어를 오류가 없게 만든다.
      -사용자는 경고를 받기보다는 결과에 대한 안내를 받아야 한다.
      -사용자에게 친숙한 용어를 사용한다.
      -메시지의 형식과 위치가 일관성 있어야 한다.
  도움말 제공하기
    도움말을 설계할 때에는 사용자의 입장에서 본다.
    지침
      -단순성
        도움말 메시지는 간결하고 요점만 있어야 한다.
      -조직화
        도움말 메시지의 정보는 사용자들이 쉽게 받아들일 수 있어야 한다.
      -데모
        어떻게 수행하고 작동하는 지를 사용자에게 명시적으로 보여주는것이 유용하다.
      -상상에 민감한 도움말
        사용자가 필드의 세부수준에 따른 도움말을 얻을 수 있도록 한다.
      -사용자들은 도움말을 요청했던 곳으로 항상 돌아와야 한다.
  대화 설계하기
    대화
      -정보가 사용자에게 보여지고 정보를 사용자로부터 얻는 순서
    주요 디자인 지침은 실행의 순서, 키입력, 용어의 일관성이다.
    3단계 과정
      1.대화 순서를 설계한다.
      2.프로토타입을 개발한다.
      3.유용성을 평가한다.
  대화 순서 설계하기
    순서를 정의한다.
    사용자, 업무, 기술적 환경적 특성의 명확한 이해를 한다.
    대화도
      -사용자와 컴퓨터 간의 대화를 박스와 선을 이용한 다이어 그램을 이용하여
       설계하고 표현하는 공식적인 방법.
      -세가지 영역으로 구성된 박스
        1. 상단 : 다른 화면들이 참조하기 위해 사용하는 유일한 화면
          참조번호를 포함한다.
        2. 중간 : 화면의 이름 또는 설명을 포함하낟.
        3. 하단 : 현재의 화면에서 접근할 수 있는 화면 참조번호를 포함한다.
  프로토타이핑 개발과 유용성 평가
    때때로 생략할 수 있는 활동임
    그래픽 설계 환경을 이용하면 간단하게 수행할 수 있다.

  시스템 구축 및 유지보수
    7개의 주요 활동
      -코딩
      -테스팅
      -설치
      -문서화
      -교육
      -지원
      -유지보수
    목적
      -최종 물리적 설계 명세서를 작동되고 신뢰할 만한 소프트웨어와 하드웨어로 전환
      -수행될 작업을 문서화
      -현재와 향후의 사용자들과 시스템의 관리자에게 도움을 제공
  코딩,테스팅,설치 과정
    -코딩
      -물리적 설계 명세서를 가지고 컴퓨터 코드로 전환
      산출물
        -코드, 프로그램 문서
    -테스팅
      -테스트는 다양한 전략을 이용하여 수행된다.
      산출물
        -테스트 시나리오 및 테스트 데이터
        -프로그램과 시스템 테스팅의 결과
    -설치
      -현 시스템이 신 시스템으로 대체되는 동안에 진행된다.
      산출물
        -사용자 지침
        -사용자 교육 게획
        -설치 및 전환 게획
  시스템 문서화, 사용자 교육 및 지원 과정
    -문서의 사용 대상자
      -시스템의 가동 동안 시스템을 유지 보수할 정보시스템 지구언
      -하루 일과의 일부로 시스템을 사용할 사람들
    -산출물
      -문서
        -시스템 문서
        -사용자 문서
      -사용자 교육 계획
        -수업
        -튜토리얼
      -사용자 교육 모듈
        -교육 자료
        -컴퓨터 기반 교육 지원
      -사용자 지원 계획
        -헬프 데스크
        -온라인 도움말
        -게시판 및 다른 지원 체계
  정보시스템 유지보수 과정
    -SDLC의 초기로 되돌아가서 변경사항이 구축될 때까지 시스템에 집중된 개발 절차를
     반복하는 과정
    -4가지 주요 활동
      1.유지보수 요청의 접수   - 시스템 계획 및 선정
      2.요청사항을 변경사항으로 전환 - 시스템 분석
      3.변경사항 설계 - 시스템 설계
      4.변경사항 구축 - 시스템 구현 및 운영
    -산출물
      -유지보수 활동 동안 생성되거나 변경된 모든 설계 문서의 최근 버전과
       소프트웨어의 최근 버전을 개발

응용시스템 테스팅
  -분석단계 동안에 테스트 계획이 개발된다.
  -설계단계 동안 단위 테스트 계획과 시스템 테스트 계획이 개발된다.
  -실제 테스팅은 구축 동안에 이루어진다.
  -테스트 계획은 테스팅에 관계된 모든 당사자들간에 향상된 의사소통을 제공한다.
    -체크리스트를 이용

  응용시스템 테스팅 유형
    -조사
      -프로그램언어 상의 예견되는 오류들에 대한 프로그램 코드를 참여자들이 직접
       검사하는 테스팅 기법
    -검토회의
      -시스템 개발 프로세스를 통해 생선된 산출물에 대해 동료들이 검토하는것,
       구조화된 검토회의 라고도 한다.
    -데스크 체킹
      -검토자가 수동적인 방식에 의해 프로그램 코드를 순차적으로 실행시키는 테스팅 기법
    -단위 테스트
      -각 모듈에 대해 오류를 발견하기 위한 목적으로만 테스트를 하는 것으로 모듈 테스팅
      이라고도 한다,
    -통합 테스팅
      -프로그램을 구성하는 모든 모듈들을 함께 테스트 하는 기법, 모듈들은 전형적으로
      하향식으로 통합된다.
    -시스템 테스팅
      -시스템을 구성하는 모든 프로그램들을 대상으로 테스트하는 것, 프로그램들은
      전형적으로 하향식 관점으로 연결되어 있다.
    -스텁 테스팅
      -하향식으로 작성되고 테스트된 모듈들을 테스팅 하는데 이용되는 기법,
       이 기법에서는 몇 개의 코드 라인들이 부속 모듈드을 대신에 이용된다.
  응용시스템 테스팅 과정
    1.테스팅의 목적은 시스템이 요구사항을 만족하는 지를 확인하기 위해서이다.
    2.테스팅 계획은 꼭 세워야 한다.
    - 테스트 사례
      -시스템의 일반적, 치명적 또는 비정상적 사용을 대표 할 수 있는 처리,질의 또는
       내비게이션 경로에 대한 세부적인 시나리오
      -테스트 사례와 결과는 완벽하게 문서화되어야 하고 으용시스템의 각 개정된 버전
       별로 반복되어서 작성 되어야 한다.

  사용자에 의한 수용 테스팅
    실제 사용자가 완성된 정보시스템을 테스트하고 결과에 대해서 사용자가 수용여부를
    결정하는 과정
    -알파 테스팅
      -사용자가 완성된 정보시스템에 대해 가상 데이터를 사용하여 수행하는 테스팅
      -복구 테스팅
        -복구가 적절하게 이루어질 수 있는 지를 검증하기 위해 소프트웨어를 강제로 다운되게 한다.
      -보안 테스팅
        -시스템에 내장된 방어 매커니즘이 부적절한 침입을 막을 수 있는 지를 검증
      -스트레스 테스팅
        -시스템이 다운되는 지 검증
      -성능 테스팅
        -시스템이 사용될 가능한 환경의 범위 안에서 시스템이 어떻게 성과를 낼지를 결정
    -베타 테스팅
      -완성된 정보시스템에 대해서 실제 사용자 환경에서 실제 데이터를 이용한 사용자 테스팅
